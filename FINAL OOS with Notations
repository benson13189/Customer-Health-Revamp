with oos as --defining cte and using original query for OOS calculations
(select
        to_date(ss.date_of_refesh) as date_of_refesh, --converts refesh (date snapshot is taken) to date as assigns alias
        ss.id as store_id,
        case
            when ss.last_tx_date_time >= dateadd('hour', -72, ss.date_of_refesh) then 1
            else 0
        end as in_sync, --case statement to count last tx date from store when last tx date is less or equal to 3 days prior to refesh date, classified as 'in sync'
        case
            when ss.last_tx_date_time >= dateadd('hour', -72, ss.date_of_refesh) then 0
            else 1
        end as out_of_sync, --case statement to count last tx date from store when last tx date is more than 3 days prior to refesh date, classified as 'out of sync'
        (in_sync + out_of_sync) as snap_count, --calculates the total in sync and out of sync snapshots for each store
        (out_of_sync / snap_count) * 100 as avg_time_oos --calculates the number of instances a store is oos divided by the number of snapshots we have (x100) to get an out of sync %/rate of a given store's snapshots
        
        from "SHARED"."SNAPSHOTS"."STORES_TABLE_SNAPSHOT" ss
            left join "PROD"."SALESFORCE"."ACCOUNT" a
             on store_id = a.store_id__c --joining the snapshots table to the accounts table on store ids
            left join "PROD"."APPDB"."STORES" b --joining appdb stores table to pull in TSD 
            on store_id = b.id
        
        where 
                  
                  bitand(b.bit_flag,8192)=8192 --tsd status is active
              and date_of_refesh > date_of_first_transaction__c --ensures that date of the snapshot is at least post-installation
              and date_of_refesh >= dateadd('day',-30,getdate()) --filtering to only look for results within the previous 30 days, as we want this new Customer Health Output to contain relatively recent data around store performance
              and isparent__c = 'FALSE' --filtering out any inapplicable parent accounts             
                        
)

select
distinct(oos.store_id) as "Store ID", --using distinct store IDs so we can add together results below for calculations and want to avoid having on SID expressed across multiple rows with different snapshot dates
sum(oos.in_sync) as "Days in Sync", --adding together the total snapshots where the store is OOS
sum(oos.out_of_sync) as "Days OOS", --adding total snapshots where the store is in-sync
cast(avg(oos.avg_time_oos) as number(10,2)) as "Avg % OOS", --getting an average % (w/2 decimals) that a store is out of sync over the 30 day timeframe
case
    when "Days OOS" = '0' then 5
    when "Days OOS" between '1' and '2' then 4
    when "Days OOS" between '3' and '4' then 3
    when "Days OOS" between '5' and '6' then 2
    when "Days OOS" between '7' and '8' then 1
    else 0 end as "New CHO" --case statement to assign new values based upon proposed changes to calculate a new customer health score on a scale of 5 down to 0

from oos

group by "Store ID"
